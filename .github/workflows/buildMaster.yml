name: .NET Core
env:
  AZURE_WEBAPP_NAME: microserviciovuelo   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '5'  
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]     
jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Install dotnet code coverage tool
      run: dotnet tool install --global dotnet-coverage
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"inturias" /o:"rinturias" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        dotnet build --no-restore
        dotnet test --no-build --verbosity normal
        dotnet-coverage collect 'dotnet test Aerolinea.Vuelos.Test' -f xml  -o 'coverage.xml'
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"    
        release:
         needs: build
         build-and-deploy:
            runs-on: ubuntu-latest
            steps:
            - uses: actions/checkout@v3
            - name: Setup .NET
              uses: actions/setup-dotnet@v2        
              with:
                dotnet-version: 5.0.x
            - name: Restore dependencies
              run: dotnet restore

            # checkout the repo
            - name: 'Checkout GitHub Action'
              uses: actions/checkout@main

            - name: 'Login via Azure CLI'
              uses: azure/login@v1
              with:
               creds: ${{ secrets.AZURE_CREDENTIALS }}
              
            - name: 'Login via Azure CLI azure docker'
              uses: azure/docker-login@v1
              with:
               login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
               username: ${{ secrets.REGISTRY_USERNAME }}
               password: ${{ secrets.REGISTRY_PASSWORD }}
            - run: docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:latest
            - name: 'Vulnerability scan container image with Trivy'
              uses: aquasecurity/trivy-action@master
              with:
               image-ref: ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:latest
               format: 'sarif'
               output: 'trivy-results.sarif'
               severity: 'CRITICAL,HIGH'

            - name: 'Upload Trivy scan results to GitHub Security tab'
              uses: github/codeql-action/upload-sarif@v2
              with:
               sarif_file: 'trivy-results.sarif'

            - name: 'Push container image to ACR'
              uses: azure/docker-login@v1
              with:
               login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
               username: ${{ secrets.REGISTRY_USERNAME }}
               password: ${{ secrets.REGISTRY_PASSWORD }}
            - run: docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:latest
            - name: Deploy to Azure Web App
              id: deploy-to-webapp
              uses: azure/webapps-deploy@0b651ed7546ecfc75024011f76944cb9b381ef1e
              with:
                app-name: ${{ env.AZURE_WEBAPP_NAME }}
                publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
                package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
#             - name: 'Deploy to Azure Container Instances'
#               uses: 'azure/aci-deploy@v1'
#               with:
#                 resource-group: ${{ secrets.RESOURCE_GROUP }}
#                 dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
#                 image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:latest
#                 registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
#                 registry-username: ${{ secrets.REGISTRY_USERNAME }}
#                 registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#                 name: aci-microserviciovuelo-new
#                 location: 'west us 3'
